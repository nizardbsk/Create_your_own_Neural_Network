import numpy
import scipy.special

class NeuralNetwork:
	def __init__(self,inputnodes,hiddennodes,outputnodes,learningrate):
		# set number of nodes in each layer
		self.inodes=inputnodes
		self.hnodes=learningrate
		self.onodes=outputnodes
		# set the learning rate
		self.lr=learningrate
		# creating the weights matrices
		wih=(numpy.random.normal(0.0,(pow(self.hnodes,-0.5)),(self.hnodes,self.inodes)))
		who=(numpy.random.normal(0.0,(pow(self.onodes,-0.5)),(self.onodes,self.hnodes)))
		#set the activation function
		self.act_fnc= lambda x: scipy.special.expit(x)
		
	def train():
		pass
		
	def query(self,inputs_list):
		inputs = numpy.array(inputs_list, ndmin=2).T
		hidden_inputs=numpy.dot(self.wih,inputs)
		hidden_outputs=self.act_fnc(hidden_inputs)
		
		final_inputs=numpy.dot(self.who,hidden_outputs)
		final_outputs=self.acts_fnc(hidden_inputs)
		
		return final_outputs

n=NeuralNetwork(3,3,3,0.3)
